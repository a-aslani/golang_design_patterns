// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/a-aslani/golang_design_patterns/structural/facade (interfaces: CurrentWeatherDataRetriever)
//
// Generated by this command:
//
//	mockgen -package mockfacade -destination structural/facade/mock/weather.go github.com/a-aslani/golang_design_patterns/structural/facade CurrentWeatherDataRetriever
//

// Package mockfacade is a generated GoMock package.
package mockfacade

import (
	reflect "reflect"

	facade "github.com/a-aslani/golang_design_patterns/structural/facade"
	gomock "go.uber.org/mock/gomock"
)

// MockCurrentWeatherDataRetriever is a mock of CurrentWeatherDataRetriever interface.
type MockCurrentWeatherDataRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockCurrentWeatherDataRetrieverMockRecorder
}

// MockCurrentWeatherDataRetrieverMockRecorder is the mock recorder for MockCurrentWeatherDataRetriever.
type MockCurrentWeatherDataRetrieverMockRecorder struct {
	mock *MockCurrentWeatherDataRetriever
}

// NewMockCurrentWeatherDataRetriever creates a new mock instance.
func NewMockCurrentWeatherDataRetriever(ctrl *gomock.Controller) *MockCurrentWeatherDataRetriever {
	mock := &MockCurrentWeatherDataRetriever{ctrl: ctrl}
	mock.recorder = &MockCurrentWeatherDataRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrentWeatherDataRetriever) EXPECT() *MockCurrentWeatherDataRetrieverMockRecorder {
	return m.recorder
}

// GetByCityAndCountryCode mocks base method.
func (m *MockCurrentWeatherDataRetriever) GetByCityAndCountryCode(arg0, arg1 string) (*facade.Weather, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCityAndCountryCode", arg0, arg1)
	ret0, _ := ret[0].(*facade.Weather)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCityAndCountryCode indicates an expected call of GetByCityAndCountryCode.
func (mr *MockCurrentWeatherDataRetrieverMockRecorder) GetByCityAndCountryCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCityAndCountryCode", reflect.TypeOf((*MockCurrentWeatherDataRetriever)(nil).GetByCityAndCountryCode), arg0, arg1)
}

// GetByGeoCoordinates mocks base method.
func (m *MockCurrentWeatherDataRetriever) GetByGeoCoordinates(arg0, arg1 float32) (*facade.Weather, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGeoCoordinates", arg0, arg1)
	ret0, _ := ret[0].(*facade.Weather)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGeoCoordinates indicates an expected call of GetByGeoCoordinates.
func (mr *MockCurrentWeatherDataRetrieverMockRecorder) GetByGeoCoordinates(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGeoCoordinates", reflect.TypeOf((*MockCurrentWeatherDataRetriever)(nil).GetByGeoCoordinates), arg0, arg1)
}
